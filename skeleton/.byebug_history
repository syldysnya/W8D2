quit
quyit
req.methods
@routes
req
ab = @controller_class.new(req, res)
var = @controller_class.new(req, res)
req.new
res
req
var = @controller_class.new
@controller_class.new
@http_method
@pattern
@action_name
@action_method
@controller_class
quit
@pattern =~ req.path
quit
@pattern
req.method(@http_method)
req.method
c
n
req.method
quit
@http_method
@controller_class
@action_name
quit
req.params
req.methods
@pattern
req
quit
res
req
params
@pattern
quit
req.methods
quit
req
quit
action_name
controller_class
http_method
pattern
quit
method
pattern
quit
y
quit
action_name
controller_class
method
pattern
quit
Router.routes
Router.new
Router.all
quit
@session
@cookie
quit
req.params
quit
n
@cookie
quit
@cookie[:_rails_lite_app]
@cookie["_rails_lite_app"]
@cookie = req.cookies
JSON.parse(req.cookies)
req.cookies
quit
res.cookies
Rack::Request#cookies
res
quit
req.env.each do |key, val|
req.env
rack.request.cookie_hash
req.env[:rack.request.cookie_hash]
req.env.rack.request.cookie_hash
req.env.ack.request.cookie_hash
req.env
req
quit
Rack::Session::Cookie.new('hi')
Rack::Session::Cookie.new
Rack::Session::Cookie
Rack::Session::Cookie.key
cookie_rails_lite_app
n
c
self[key] = val
self
val
key
quit
JSON.parse(req)
JSON.parse(res)
JSON.parse(res) : {}
req
quit
@res
@req
c
@res
quit
@cats
template_file
ERB.new(template_file).result(binding)
ERB.new(template_file).result(binding)\
n
File.read(File.join("views", "#{self.class.to_s.underscore}", "#{template_name}.html.erb"))
File.join("views", "#{self.class.to_s.underscore}", "#{template_name}.html.erb")
File.read('views')
self.class.to_s
self.class
quit
ERB.new('Hi')
template_name
ERB.new(template_name)
ERB.new(template_name).result(binding)
quit
template_name
quit
c
@res.headers
@res
c
users_controller2
quit
@already_built_response
quit
c
nc
n
url
n
c
res.status
status
content_type
content
c
res
req.env
req
quit
url.status
url
quit
url
content.status = res.status
content_type
res.status
req
res
content
quit
exit
c
@req
n
res
req
